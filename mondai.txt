クラス】ToDoリストプログラムを作ろう！
問題
次のようなToDoリストプログラムを作成しましょう。

実行例
【追加】 [No.1] 洗濯:7時半までに干し終える
【追加】 [No.2] 仕事:9時〜18時
*=*=*=*=*=*=*=*=* task *=*=*=*=*=*=*=*=*
[No.1] 洗濯:7時半までに干し終える
[No.2] 仕事:9時〜18時
*=*=*=*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
【削除】 [No.1] 洗濯:7時半までに干し終える
【追加】 [No.3] 買物:卵, ヨーグルト
【！】 該当idのタスクはありません。
【削除】 [No.3] 買物:卵, ヨーグルト
*=*=*=*=*=*=*=*=* task *=*=*=*=*=*=*=*=*
[No.2] 仕事:9時〜18時
*=*=*=*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*

条件
TaskクラスとToDoクラスを作成
各クラスごとにファイルを作成し，メインのファイルで読み込む形式とすること
タスク（Task）は「ID（id）」「タイトル（title）」「内容（content）」の3つの情報を持つ
タスクのIDは1から順番に振られる（タスクが削除された場合も続きからIDを振る）
ToDoリストは，タスクの追加・一覧表示・削除の機能を持つ
タスクの削除は，IDを指定して行う

ヒント1（ベース）
以下のコードで上記の「実行例」が得られるように考えてみましょう。

main.rb
class Task
  # コードを追加
end

class ToDo
  # コードを追加
end

task1 = Task.new(title: "洗濯", content: "7時半までに干し終える")
task2 = Task.new(title: "仕事", content: "9時〜18時")
task3 = Task.new(title: "買物", content: "卵, ヨーグルト")

todo = ToDo.new
todo.add(task1)
todo.add(task2)
todo.info
todo.delete(id: 1)
todo.add(task3)
todo.delete(id: 4)
todo.delete(id: 3)
todo.info

ヒント2（IDの自動付与）
ヒント1では手も足も出ない……という方は，ヒント2以降を参考に少しずつ実装してみましょう。

まず，Taskクラスのインスタンスを作成する際に @id が自動で付くようにしましょう。

クラス変数 @@count を利用するのがポイントです。

main.rb
class Task

  # コードを追記

  @@count = 0

  def initialize
    # コードを追記
  end

end

task1 = Task.new
task2 = Task.new
task3 = Task.new

puts task1.id
puts task2.id
puts task3.id
出力結果
1
2
3
この出力結果が得られるようにコードを書き加えてみましょう。

ヒント3（タスク内容を表示するメソッド）
タスク内容を表示するメソッドを作成しましょう。

（タスクの追加・一覧表示・削除に利用します）

main.rb
class Task
  # ヒント1で追加したコード
  @@count = 0

  def initialize(title:, content:)
    # ヒント1で追加したコード
    # コードを追記
  end

  def info
    # コードを追記
  end
end

task1 = Task.new(title: "洗濯", content: "7時半までに干し終える")
task2 = Task.new(title: "仕事", content: "9時〜18時")
task3 = Task.new(title: "買物", content: "卵, ヨーグルト")

puts task1.info
puts task2.info
puts task3.info
出力結果
[No.1] 洗濯:7時半までに干し終える
[No.2] 仕事:9時〜18時
[No.3] 買物:卵, ヨーグルト
ヒント4（タスクの追加・一覧表示）
ToDo クラスを作成し，そのインスタンス todo にタスクを追加したり，一覧表示できるようにしましょう。

「タスクの追加」は「配列 @tasks にTaskのインスタンスを追加すること」
「タスクの一覧表示」は「配列 @tasks に入っている Task のインスタンスを一覧表示すること」
このように考えれば，initializeメソッドで todo のインスタンス変数 @tasks を空配列に設定し，
この配列 @tasks に Taskのインスタンスを出し入れする，という発想が出てきます。

main.rb
class Task
  # ヒント1で追加したコード
  @@count = 0

  def initialize(title:, content:)
    # ヒント1,2で追加したコード
  end

  def info
    # ヒント2で追加したコード
  end
end

class ToDo
  def initialize
    @tasks = []
  end

  def add(task)
    # コードを追記
  end

  def info
    # コードを追記
  end
end

task1 = Task.new(name: "洗濯", content: "8時までに干し終える")
task2 = Task.new(name: "仕事", content: "9時〜18時")
task3 = Task.new(name: "買物", content: "卵,ネギ")

todo = ToDo.new
todo.add(task1)
todo.add(task2)
todo.info

出力結果
【追加】 [No.1] 洗濯:7時半までに干し終える
【追加】 [No.2] 仕事:9時〜18時

*=*=*=*=*=*=*=*=* task *=*=*=*=*=*=*=*=*
[No.1] 洗濯:7時半までに干し終える
[No.2] 仕事:9時〜18時
*=*=*=*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
【補足】細かいことを言えば，タスクがない時にinfoメソッドを使用した場合にも対処できるとよいでしょう。
（【！】 タスクはありません。 と表示する）

ヒント5（タスクの削除）
タスクの削除は「指定した id のタスク」を削除することですので，該当idのタスクが存在する保証はありません。
そこで，まず，指定した id のタスクを @tasks から探して変数 task を定義し，
これが存在する場合と存在しない場合で条件分岐するのがポイントです。

ヒント6（ファイルの分割）
Task クラスと ToDo クラスを別のファイルに移動し，main.rb から読み込めるようにしましょう。